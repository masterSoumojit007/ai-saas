"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-cloudinary";
exports.ids = ["vendor-chunks/next-cloudinary"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-cloudinary/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/next-cloudinary/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CldImage: () => (/* binding */ pe),\n/* harmony export */   CldOgImage: () => (/* binding */ ce),\n/* harmony export */   CldUploadButton: () => (/* binding */ fe),\n/* harmony export */   CldUploadWidget: () => (/* binding */ q),\n/* harmony export */   CldVideoPlayer: () => (/* binding */ Ce),\n/* harmony export */   cloudinaryLoader: () => (/* binding */ Z),\n/* harmony export */   getCldImageUrl: () => (/* binding */ U),\n/* harmony export */   getCldOgImageUrl: () => (/* binding */ z),\n/* harmony export */   getCldVideoUrl: () => (/* binding */ ne)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/image */ \"(ssr)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.mjs\");\n/* harmony import */ var _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @cloudinary-util/url-loader */ \"(ssr)/./node_modules/@cloudinary-util/url-loader/dist/chunk-NNPOW4QR.mjs\");\n/* harmony import */ var next_package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/package.json */ \"(ssr)/./node_modules/next/package.json\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/head */ \"(ssr)/./node_modules/next/dist/client/components/noop-head.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/script */ \"(ssr)/./node_modules/next/dist/api/script.js\");\n\n\n\n\nasync function X(t) {\n    let { src: e } = t;\n    try {\n        await new Promise((l, n)=>{\n            fetch(e).then((o)=>{\n                if (!o.ok) {\n                    n(o);\n                    return;\n                }\n                l(o);\n            });\n        });\n    } catch (l) {\n        return l.status === 423 ? (await new Promise((n)=>setTimeout(()=>n(void 0), 200)), await X(t)) : !1;\n    }\n    return !0;\n}\nfunction w(t) {\n    if (!t) throw new Error(\"A Cloudinary Cloud name is required, please make sure NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME is set and configured in your environment.\");\n}\n\n\nvar le = {\n    name: \"next-cloudinary\",\n    version: \"6.0.1\",\n    license: \"MIT\",\n    main: \"./dist/index.js\",\n    module: \"./dist/index.mjs\",\n    types: \"./dist/index.d.ts\",\n    source: \"src/index.ts\",\n    scripts: {\n        build: \"tsup\",\n        dev: \"tsup --watch\",\n        prepublishOnly: \"cp ../README.md . && cp ../LICENSE . && pnpm build\",\n        postpublish: \"rm ./README.md && rm ./LICENSE\",\n        test: \"vitest run\",\n        \"test:app\": 'NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=\"test\" pnpm build && cd tests/nextjs-app && npm install && npm run build',\n        \"test:watch\": \"vitest\"\n    },\n    dependencies: {\n        \"@cloudinary-util/types\": \"1.0.0\",\n        \"@cloudinary-util/url-loader\": \"5.0.0\",\n        \"@cloudinary-util/util\": \"^3.0.0\",\n        \"@tsconfig/recommended\": \"^1.0.3\"\n    },\n    devDependencies: {\n        \"@babel/core\": \"^7.23.2\",\n        \"@babel/preset-env\": \"^7.23.2\",\n        \"@types/node\": \"^20.11.5\",\n        \"@types/react\": \"^18.2.33\",\n        \"@types/react-dom\": \"^18.2.14\",\n        dotenv: \"^16.3.1\",\n        mkdirp: \"^3.0.1\",\n        tsup: \"^7.2.0\",\n        typescript: \"^5.2.2\",\n        vitest: \"^1.3.1\"\n    },\n    peerDependencies: {\n        next: \"^12 || ^13 || ^14\",\n        react: \"^17 || ^18\"\n    }\n};\nvar B = \"A\", F = \"V\", $ = se(next_package_json__WEBPACK_IMPORTED_MODULE_2__.version), H = se(le.version);\nfunction se(t) {\n    let e = t;\n    return e.includes(\"-\") && (e = e.split(\"-\")[0]), e;\n}\nfunction U(t, e, l) {\n    let n = e?.cloud?.cloudName ?? \"dmpdh6ila\";\n    return w(n), (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: t,\n        config: Object.assign({\n            cloud: {\n                cloudName: n\n            }\n        }, e),\n        analytics: Object.assign({\n            product: B,\n            sdkCode: F,\n            sdkSemver: H,\n            techVersion: $,\n            feature: \"\"\n        }, l)\n    });\n}\nfunction Z({ loaderOptions: t, imageProps: e, cldOptions: l, cldConfig: n = {} }) {\n    let o = {\n        ...e,\n        ...l\n    };\n    if (o.width = typeof o.width == \"string\" ? parseInt(o.width) : o.width, o.height = typeof o.height == \"string\" ? parseInt(o.height) : o.height, typeof t?.width == \"number\" && typeof o.width == \"number\" && t.width !== o.width) {\n        let a = t.width / o.width;\n        o.width = t.width, typeof o.height == \"number\" && (o.height = Math.floor(o.height * a));\n    } else typeof t?.width == \"number\" && typeof o?.width != \"number\" && (o.width = t?.width);\n    return U(o, n);\n}\nvar be = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(e, l) {\n    let n = !1, o = [\n        \"deliveryType\",\n        \"preserveTransformations\",\n        \"strictTransformations\",\n        \"assetType\"\n    ];\n    _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.transformationPlugins.forEach(({ props: i })=>{\n        Object.keys(i).forEach((I)=>{\n            if (o.includes(I)) throw new Error(`Option ${I} already exists!`);\n            o.push(I);\n        });\n    });\n    let a = {\n        alt: e.alt,\n        src: e.src\n    };\n    Object.keys(e).filter((i)=>!o.includes(i)).forEach((i)=>a[i] = e[i]);\n    let s = Object.keys(a).map((i)=>`${i}:${a[i]}`).join(\";\"), [y, g] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(s), r = {};\n    if (o.forEach((i)=>{\n        e[i] && (r[i] = e[i] || void 0);\n    }), e.preserveTransformations) try {\n        let i = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.getTransformations)(e.src).map((f)=>f.join(\",\"));\n        r.rawTransformations = [\n            ...i.flat(),\n            ...e.rawTransformations || []\n        ];\n    } catch (i) {\n        console.warn(`Failed to preserve transformations: ${i.message}`);\n    }\n    let C = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[{\"protocol\":\"https\",\"hostname\":\"res.cloudinary.com\",\"port\":\"\"}]} || {};\n    (e.unoptimized === !0 || C?.unoptimized === !0) && (a.src = U({\n        ...r,\n        width: a.width,\n        height: a.height,\n        src: a.src,\n        format: \"default\",\n        quality: \"default\"\n    }, e.config));\n    async function N(i) {\n        let f = !0;\n        if (n) return;\n        if (n = !0, typeof e.onError == \"function\") {\n            let P = e.onError(i);\n            typeof P == \"boolean\" && P === !1 && (f = !1);\n        } else typeof e.onError == \"boolean\" && e.onError === !1 && (f = !1);\n        if (f === !1) return;\n        let I = i.target;\n        await X({\n            src: I.src\n        }) && g(`${s};${Date.now()}`);\n    }\n    let T = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(N, [\n        X,\n        s\n    ]), m = next_image__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n    return \"default\" in m && (m = m.default), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(m, {\n        key: y,\n        ...a,\n        loader: (i)=>Z({\n                loaderOptions: i,\n                imageProps: a,\n                cldOptions: r,\n                cldConfig: e.config\n            }),\n        onError: T,\n        ref: l\n    });\n}), pe = be;\n\n\nfunction z(t) {\n    return U({\n        ...t,\n        format: t.format || \"jpg\",\n        width: t.width || 1200,\n        height: t.height || 627,\n        crop: t.crop || {\n            type: \"fill\",\n            gravity: \"center\",\n            source: !0\n        }\n    });\n}\nvar ve = \"summary_large_image\", De = ({ excludeTags: t = [], twitterTitle: e, keys: l = {}, ...n })=>{\n    let { alt: o } = n, { width: a = 1200, height: s = 627 } = n;\n    a = typeof a == \"string\" ? parseInt(a) : a, s = typeof s == \"string\" ? parseInt(s) : s;\n    let y = z({\n        ...n,\n        width: a,\n        height: s\n    }), g = z({\n        ...n,\n        width: a,\n        height: s,\n        format: n.format || \"webp\"\n    }), r = {\n        \"og:image\": \"og-image\",\n        \"og:image:secure_url\": \"og-image-secureurl\",\n        \"og:image:width\": \"og-image-width\",\n        \"og:image:height\": \"og-image-height\",\n        \"og:image:alt\": \"og-image-alt\",\n        \"twitter:title\": \"twitter-title\",\n        \"twitter:card\": \"twitter-card\",\n        \"twitter:image\": \"twitter-image\",\n        ...l\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: r[\"og:image\"],\n        property: \"og:image\",\n        content: y\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: r[\"og:image:secure_url\"],\n        property: \"og:image:secure_url\",\n        content: y\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: r[\"og:image:width\"],\n        property: \"og:image:width\",\n        content: `${a}`\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: r[\"og:image:height\"],\n        property: \"og:image:height\",\n        content: `${s}`\n    }), o && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: r[\"og:image:alt\"],\n        property: \"og:image:alt\",\n        content: o\n    }), !t.includes(\"twitter:title\") && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: r[\"twitter:title\"],\n        property: \"twitter:title\",\n        content: e || \" \"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: r[\"twitter:card\"],\n        property: \"twitter:card\",\n        content: ve\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: r[\"twitter:image\"],\n        property: \"twitter:image\",\n        content: g\n    }));\n}, ce = De;\n\n\n\nfunction ue(t) {\n    return window && \"requestIdleCallback\" in window ? requestIdleCallback(t) : setTimeout(()=>t(), 1);\n}\nvar Ve = [\n    \"success\"\n], Se = {\n    abort: \"onAbort\",\n    \"batch-cancelled\": \"onBatchCancelled\",\n    close: \"onClose\",\n    \"display-changed\": \"onDisplayChanged\",\n    publicid: \"onPublicId\",\n    \"queues-end\": \"onQueuesEnd\",\n    \"queues-start\": \"onQueuesStart\",\n    retry: \"onRetry\",\n    \"show-completed\": \"onShowCompleted\",\n    \"source-changed\": \"onSourceChanged\",\n    success: \"onSuccess\",\n    tags: \"onTags\",\n    \"upload-added\": \"onUploadAdded\"\n}, ke = ({ children: t, onError: e, onOpen: l, onUpload: n, options: o, signatureEndpoint: a, uploadPreset: s, ...y })=>{\n    let g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), C = !!a, [N, T] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [m, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [f, I] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), E = {\n        cloudName: \"dmpdh6ila\",\n        uploadPreset: s || process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET,\n        apiKey: process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY,\n        ...o\n    };\n    w(\"dmpdh6ila\"), C && (E.uploadSignature = h, E.apiKey || console.warn(\"Missing dependency: Signed Upload requires an API key\")), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (typeof m > \"u\") return;\n        m.event === \"success\" && typeof n == \"function\" && (process.env.NODE_ENVIRONMENT === \"development\" && console.warn(\"The onUpload callback is deprecated. Please use onSuccess instead.\"), n(m, r.current));\n    }, [\n        m\n    ]);\n    function P() {\n        I(!1), g.current || (g.current = window.cloudinary), ue(()=>{\n            r.current || (r.current = b());\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            r.current?.destroy(), r.current = void 0;\n        }, []);\n    function h(d, u) {\n        if (typeof a > \"u\") throw Error(\"Failed to generate signature: signatureEndpoint undefined.\");\n        fetch(a, {\n            method: \"POST\",\n            body: JSON.stringify({\n                paramsToSign: u\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then((_)=>_.json()).then(({ signature: _ })=>{\n            d(_);\n        });\n    }\n    function c(d, u = []) {\n        if (r.current || (r.current = b()), typeof r?.current[d] == \"function\") return r.current[d](...u);\n    }\n    function v(d) {\n        c(\"close\", [\n            d\n        ]);\n    }\n    function L(d) {\n        return c(\"destroy\", [\n            d\n        ]);\n    }\n    function W() {\n        c(\"hide\");\n    }\n    function V() {\n        return c(\"isDestroyed\");\n    }\n    function S() {\n        return c(\"isMinimized\");\n    }\n    function A() {\n        return c(\"isShowing\");\n    }\n    function x() {\n        c(\"minimize\");\n    }\n    function Y(d, u) {\n        c(\"open\", [\n            d,\n            u\n        ]), typeof l == \"function\" && l(r.current);\n    }\n    function J() {\n        c(\"show\");\n    }\n    function k() {\n        c(\"update\");\n    }\n    let G = {\n        close: v,\n        destroy: L,\n        hide: W,\n        isDestroyed: V,\n        isMinimized: S,\n        isShowing: A,\n        minimize: x,\n        open: Y,\n        show: J,\n        update: k\n    };\n    function b() {\n        return g.current?.createUploadWidget(E, (d, u)=>{\n            if (d && d !== null && (T(d), typeof e == \"function\" && e(d, {\n                widget: r.current,\n                ...G\n            })), typeof u?.event == \"string\") {\n                Ve.includes(u?.event) && i(u);\n                let _ = Se[u.event];\n                if (typeof _ == \"string\" && typeof y[_] == \"function\") {\n                    let R = y[_];\n                    R(u, {\n                        widget: r.current,\n                        ...G\n                    });\n                }\n            }\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, typeof t == \"function\" && t({\n        cloudinary: g.current,\n        widget: r.current,\n        results: m,\n        error: N,\n        isLoading: f,\n        ...G\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        id: `cloudinary-uploadwidget-${Math.floor(Math.random() * 100)}`,\n        src: \"https://upload-widget.cloudinary.com/global/all.js\",\n        onLoad: P,\n        onError: (d)=>console.error(`Failed to load Cloudinary Upload Widget: ${d.message}`)\n    }));\n}, q = ke;\nvar Ge = ({ className: t, children: e, onClick: l, onError: n, onOpen: o, onUpload: a, onAbort: s, onBatchCancelled: y, onClose: g, onDisplayChanged: r, onPublicId: C, onQueuesEnd: N, onQueuesStart: T, onRetry: m, onShowCompleted: i, onSourceChanged: f, onSuccess: I, onTags: E, onUploadAdded: P, options: h, signatureEndpoint: c, uploadPreset: v, ...L })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(q, {\n        onError: n,\n        onOpen: o,\n        onUpload: a,\n        onAbort: s,\n        onBatchCancelled: y,\n        onClose: g,\n        onDisplayChanged: r,\n        onPublicId: C,\n        onQueuesEnd: N,\n        onQueuesStart: T,\n        onRetry: m,\n        onShowCompleted: i,\n        onSourceChanged: f,\n        onSuccess: I,\n        onTags: E,\n        onUploadAdded: P,\n        options: h,\n        signatureEndpoint: c,\n        uploadPreset: v\n    }, ({ open: W, isLoading: V })=>{\n        function S(A) {\n            A.preventDefault(), W(), typeof l == \"function\" && l(A);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            ...L,\n            className: t || \"\",\n            onClick: S,\n            disabled: V\n        }, e || \"Upload\");\n    })), fe = Ge;\n\n\n\n\n\nfunction ne(t, e, l) {\n    let n = e?.cloud?.cloudName ?? \"dmpdh6ila\";\n    return w(n), (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: {\n            assetType: \"video\",\n            ...t\n        },\n        config: Object.assign({\n            cloud: {\n                cloudName: n\n            }\n        }, e),\n        analytics: Object.assign({\n            product: B,\n            sdkCode: F,\n            sdkSemver: H,\n            techVersion: $,\n            feature: \"\"\n        }, l)\n    });\n}\nvar Q = [], ye = \"1.10.4\", Fe = (t)=>{\n    let { autoplay: e, className: l, colors: n, controls: o = !0, fontFace: a, height: s, id: y, language: g, languages: r, logo: C = !0, loop: N = !1, muted: T = !1, onDataLoad: m, onError: i, onMetadataLoad: f, onPause: I, onPlay: E, onEnded: P, poster: h, src: c, sourceTypes: v, transformation: L, quality: W = \"auto\", width: V, ...S } = t, A = Array.isArray(L) ? L : [\n        L\n    ], x = c || \"\";\n    if (x.startsWith(\"http\")) try {\n        let p = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.parseUrl)(c);\n        typeof p?.publicId == \"string\" && (x = p?.publicId);\n    } catch  {}\n    A.unshift({\n        quality: W\n    });\n    let Y = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), J = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), k = t.videoRef || J, G = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), b = t.playerRef || G, d = y || `player-${x.replace(\"/\", \"-\")}`, u = \"cld-video-player cld-fluid\";\n    l && (u = `${u} ${l}`), Q.filter((p)=>p === d).length > 1 ? console.warn(`Multiple instances of the same video detected on the\n     page which may cause some features to not work.\n    Try adding a unique id to each player.`) : Q.push(d);\n    let R = {\n        error: i,\n        loadeddata: m,\n        loadedmetadata: f,\n        pause: I,\n        play: E,\n        ended: P\n    };\n    function Ie(p) {\n        let j = R[p.type];\n        typeof j == \"function\" && j(Ue());\n    }\n    w(\"dmpdh6ila\");\n    function he() {\n        if (\"cloudinary\" in window) {\n            Y.current = window.cloudinary;\n            let p = {};\n            typeof C == \"boolean\" ? p.showLogo = C : typeof C == \"object\" && (p = {\n                ...p,\n                showLogo: !0,\n                logoImageUrl: C.imageUrl,\n                logoOnclickUrl: C.onClickUrl\n            });\n            let j = !1, ae;\n            (typeof e == \"boolean\" || e === \"true\" || e === \"false\") && (j = e), typeof e == \"string\" && e !== \"true\" && e !== \"false\" && (ae = e);\n            let D = {\n                autoplayMode: ae,\n                autoplay: j,\n                cloud_name: \"dmpdh6ila\",\n                controls: o,\n                fontFace: a || \"\",\n                language: g,\n                languages: r,\n                loop: N,\n                muted: T,\n                publicId: x,\n                transformation: A,\n                ...p,\n                ...S\n            };\n            Array.isArray(v) && (D.sourceTypes = v), typeof n == \"object\" && (D.colors = n), typeof h == \"string\" ? D.posterOptions = {\n                publicId: h\n            } : typeof h == \"object\" && (typeof h.src != \"string\" ? D.posterOptions = {\n                publicId: ne({\n                    ...h,\n                    src: x,\n                    format: \"auto:image\"\n                })\n            } : D.posterOptions = {\n                publicId: U(h)\n            }), b.current = Y.current.videoPlayer(k.current, D), Object.keys(R).forEach((de)=>{\n                typeof R[de] == \"function\" && b.current?.on(de, Ie);\n            });\n        }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            b.current?.videojs.cloudinary.dispose(), Q = Q.filter((p)=>p !== d);\n        }, []);\n    function Ue() {\n        return {\n            player: b.current,\n            video: k.current\n        };\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n        href: `https://unpkg.com/cloudinary-video-player@${ye}/dist/cld-video-player.min.css`,\n        rel: \"stylesheet\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"100%\",\n            aspectRatio: `${t.width} / ${t.height}`\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        ref: k,\n        id: d,\n        className: u,\n        width: V,\n        height: s\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        id: `cloudinary-videoplayer-${d}-${Math.floor(Math.random() * 100)}`,\n        src: `https://unpkg.com/cloudinary-video-player@${ye}/dist/cld-video-player.min.js`,\n        onLoad: he,\n        onError: (p)=>console.error(`Failed to load Cloudinary Video Player: ${p.message}`)\n    })));\n}, Ce = Fe;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-cloudinary/dist/index.mjs\n");

/***/ })

};
;